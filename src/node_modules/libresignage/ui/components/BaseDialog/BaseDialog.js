/**
* A base dialog class for creating HTML dialogs.
*
* @memberof module:libresignage/ui/components
*/
class BaseDialog {
	/**
	* Create a base dialog template.
	*
	* @param {string} title The title of the dialog.
	* @param {string} body  The body of the dialog.
	*
	* @returns {HTMLElement} The created <template> element.
	*/
	static make_template(title, body) {
		let tmp = document.createElement('template');
		tmp.content.innerHTML = `
			<div class="dialog-overlay" style="display: none;">
				<div class="dialog" class="container alert alert-info">
					<h3 class="dialog-title" class="display-5">${title}</h3>
					<p class="dialog-body">${body}</p>
					<div class="dialog-interaction"
						class="d-flex flex-row-reverse w-100 mt-3">
					</div>
				</div>
			</div>
		`;
		return tmp;
	}	

	prompt() {
		// Create prompt HTML.
		var input_grp = $(
			'<div>', { id: 'dialog-input-grp' }
		);
		input_grp.append($(
			'<input>', {
				class: 'form-control mb-2',
				id: 'dialog-input'
			}
		));
		input_grp.append($(
			'<div>', { class: 'invalid-feedback my-0' }
		));

		var ok = $(
			'<button>', {
				class: 'btn btn-primary btn-dialog',
				id: 'dialog-btn-ok',
				text: 'Ok'
			}
		);
		ok.on(
			'click',
			{obj: this },
			function(event) {
				event.data.obj.dialog_callback(
					event.data.obj,
					"ok",
					$("body #dialog-input").val()
				);
			}
		);

		var cancel = $(
			"<button>", {
				class: 'btn btn-primary btn-dialog',
				id: 'dialog-btn-cancel',
				text: 'Cancel'
			}
		);
		cancel.on(
			'click',
			{ obj: this },
			function(event) {
				event.data.obj.dialog_callback(
					event.data.obj,
					"cancel",
					null
				);
			}
		);

		$("body #dialog-interaction").before(input_grp);
		$("body #dialog-interaction").append(cancel);
		$("body #dialog-interaction").append(ok);

		// Add input validators from this.data.
		if (this.data) {
			(this.val_trig = new ValidatorTrigger(
				[new ValidatorSelector(
					$('#dialog-input')[0],
					$('#dialog-input-grp')[0],
					this.data
				)],
				(valid) => {
					$('#dialog-btn-ok').prop(
						'disabled',
						!valid
					);
				}
			)).trigger();
		}

	}

	select() {
		// Create select HTML.
		var select = $(
			'<select>', {
				class: 'form-control mb-2',
				id: 'dialog-select'
			}
		);

		// Add the individual options from this.data.
		var opt = null;
		for (var k in this.data) {
			opt = $(
				'<option>', {
					'value': k
				}
			);
			opt.text(this.data[k]);
			select.append(opt);
		}

		var ok = $(
			'<button>', {
				class: 'btn btn-primary btn-dialog',
				id: 'dialog-btn-ok',
				text: 'Ok'
			}
		);
		ok.on(
			'click',
			{obj: this},
			function(event) {
				event.data.obj.dialog_callback(
					event.data.obj,
					"ok",
					$("body #dialog-select").val()
				);
			}
		);

		var cancel = $(
			"<button>", {
				class: 'btn btn-primary btn-dialog',
				id: 'dialog-btn-cancel',
				text: 'Cancel'
			}
		);
		cancel.on(
			'click',
			{ obj: this },
			function(event) {
				event.data.obj.dialog_callback(
					event.data.obj,
					"cancel",
					null
				);
			}
		);

		$("body #dialog-interaction").before(select);
		$("body #dialog-interaction").append(cancel);
		$("body #dialog-interaction").append(ok);
	}

	create() {
		/*
		*  Create the HTML DOM elements required for the
		*  different dialog types and add them to the
		*  body element.
		*/

		if (!$.inArray(this.type, exports.TYPE)) {
			throw new Error(
				"Unknown dialog type!"
			);
		}

		var html_dom = $.parseHTML(this.TEMPLATE);
		$("body").append(html_dom);

		// Setup header and text.
		$("body #dialog-header").text(this.header);
		$("body #dialog-text").text(this.text);

		// Run type specific setup functions.
		switch(this.type) {
			case exports.TYPE.ALERT:
				this.alert();
				break;
			case exports.TYPE.CONFIRM:
				this.confirm();
				break;
			case exports.TYPE.PROMPT:
				this.prompt();
				break;
			case exports.TYPE.SELECT:
				this.select();
				break;
			default:
				break;
		}
		return true;
	}

	show() {
		/*
		*  Show this dialog. Returns true on success and
		*  false on failure.
		*
		*  User interaction while there's a dialog visible
		*  is prevented by autofocusing on the dialog OK button,
		*  preventing the use of the tab key and displaying
		*  the overlay div that catches all mouse click events.
		*/

		if (this.create()) {
			document.activeElement.blur();
			$("body #dialog-overlay").show();
			$(document).keydown(function(event) {
				if (event.keyCode == 9) {
					event.preventDefault();
				}
			});
			$("body #dialog-btn-ok").focus();
			return true;
		}
		return false;
	}
}

exports.dialog = function(type, header, text, callback, data) {
	return new exports.Dialog(
		type,
		header,
		text,
		callback,
		data
	).show();
}
